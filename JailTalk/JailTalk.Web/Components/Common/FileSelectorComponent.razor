@using JailTalk.Application.Requests.System;
@using JailTalk.Shared.Models;
@using MediatR;
@using Microsoft.AspNetCore.Components.Forms;

<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFile" Accept="@Accept" MaximumFileCount="3">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Outlined"
                   Color="ButtonColor"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            @Label
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>
<MudText Typo="Typo.caption">@fileName</MudText>
@code {

    [Parameter] public Color ButtonColor { get; set; } = Color.Primary;
    [Parameter] public string Label { get; set; } = "Upload File";

    #region File Parameter
    List<BrowserFileDto> _files = new();
    [Parameter]
    public List<BrowserFileDto> Files
    {
        get => _files; set
        {
            if (_files == value) return;
            _files = value ?? new List<BrowserFileDto>();
            FilesChanged.InvokeAsync(_files);
        }
    }
    [Parameter] public EventCallback<List<BrowserFileDto>> FilesChanged { get; set; }
    #endregion File Parameter

    [Parameter]
    public string Accept { get; set; } = "*";

    private string fileName;
    private async Task UploadFile(IReadOnlyList<IBrowserFile> files)
    {
        _files.ForEach(x => x?.Dispose());
        _files.Clear();

        foreach (var file in files)
        {
            MemoryStream ms = new MemoryStream();
            await file.OpenReadStream(10_00_00_000).CopyToAsync(ms);
            _files.Add(new BrowserFileDto
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    Size = file.Size,
                    LastModified = file.LastModified,
                    DataStream = ms
                });

        }
        fileName = string.Join(", ", _files.Select(x => x.FileName));

        await FilesChanged.InvokeAsync(_files);
    }
}
