@using JailTalk.Application.Dto.System;
@using Microsoft.AspNetCore.Components.Forms;
<div class="d-flex flex-grow-1 gap-3">
    <MudStack>
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="OnInputFileChanged" AppendMultipleFiles Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
        @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" MaximumFileCount="3">
            <ButtonTemplate>
                <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                    <MudText Typo="Typo.subtitle1">Drag and drop files here or click</MudText>
                    @foreach (var file in files)
                    {
                        <MudChip Color="Color.Dark" Text="@file.Name" />
                    }
                </MudPaper>
            </ButtonTemplate>
        </MudFileUpload>
        <MudToolBar DisableGutters="true" Class="gap-4">
            <MudButton OnClick="Upload" Disabled="@(!files.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
            <MudButton OnClick="Clear" Disabled="@(!files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
        </MudToolBar>
    </MudStack>
    <MudDivider Vertical="true" DividerType="DividerType.Middle" FlexItem="true" />
    <MudPaper Class="d-flex justify-start flex-grow-1 gap-3" Elevation="0">
        @foreach (var imageDto in Attachments)
        {
            <div>
                <div class="d-flex flex-column gap-1 justify-center align-content-center">
                    <MudImage Src="@imageDto.Base64ImageSrc" ObjectPosition="ObjectPosition.Center"
                              ObjectFit="ObjectFit.Cover" Width="84" Height="84" Alt="@imageDto.FileName" Fluid="true"></MudImage>
                    <MudText Typo="Typo.caption">@imageDto.FileName</MudText>
                </div>
            </div>
        }
    </MudPaper>
</div>
@code {

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<IBrowserFile> files = new List<IBrowserFile>();

    [Parameter]
    public List<ImageViewDto> Attachments { get; set; }

    [Parameter]
    public long MaxImageSize { get; set; } = 1_000_000;

    [Parameter]
    public EventCallback<List<ImageUploadDto>> OnUpload { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        files.AddRange(e.GetMultipleFiles());
    }

    private async Task Clear()
    {
        files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void Upload()
    {
        if (files.Any(x => x.Size > MaxImageSize))
        {
            ToastService.Error($"Choose file size less than '{MaxImageSize}' bytes.");
            return;
        }

        List<ImageUploadDto> images = files
            .Select(x => new ImageUploadDto()
                {
                    DataStream = x.OpenReadStream(MaxImageSize),
                    FileName = x.Name,
                    ContentType = x.ContentType
                }).ToList();

        OnUpload.InvokeAsync(images);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}
