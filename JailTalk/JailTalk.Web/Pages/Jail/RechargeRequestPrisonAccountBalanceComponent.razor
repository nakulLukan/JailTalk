@using JailTalk.Application.Requests.Jail;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@inject IAppMediator AppMediator;
@inherits AppBaseComponent;

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="px-8 pb-8 pt-4" Elevation="0">
        <MudGrid>
            <MudItem sm="12">
                <JailTalk.Web.Components.Common.FormTitleComponent>
                    @JailNameWithCode
                </JailTalk.Web.Components.Common.FormTitleComponent>
            </MudItem>

            <MudItem sm="12">
                <MudNumericField Label="Amount" @bind-Value="@RechargeAmount" For="@(()=> RechargeAmount)"
                                 Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyRupee"></MudNumericField>
            </MudItem>

            <MudItem sm="12">
                <AppProgressButton IsProgressing="_sendRequestProcessing"
                                   ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="(async ()=> await OnRequestSubmitted())">Send Request</AppProgressButton>
                <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => OnClose.InvokeAsync(true))">Close</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    [EditorRequired]
    public int JailId { get; set; }

    [Parameter]
    [EditorRequired]
    public string JailNameWithCode { get; set; }

    public float RechargeAmount { get; set; } = 1000;

    private bool _sendRequestProcessing = false;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<long> OnRequestSent { get; set; }

    private async Task OnRequestSubmitted()
    {
        ChangeToLoadingState(ref _sendRequestProcessing);
        await AppMediator.Send(new RequestJailAccountRechargeCommand()
            {
                JailId = JailId,
                RechargeAmount = RechargeAmount
            })
        .OnSuccess(rechargeRequestId =>
        {
            ChangeToLoadedState(ref _sendRequestProcessing);
            InvokeAsync(() => OnRequestSent.InvokeAsync(rechargeRequestId));
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
            ChangeToLoadedState(ref _sendRequestProcessing);
        });
    }
}
