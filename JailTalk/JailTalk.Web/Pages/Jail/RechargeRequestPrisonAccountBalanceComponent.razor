@using JailTalk.Application.Requests.Jail;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@inject IAppMediator AppMediator;
@inherits AppBaseComponent;
<MudDialog>
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="px-8 pb-8 pt-4" Elevation="0">
                <MudGrid>
                    <MudItem sm="12">
                        <JailTalk.Web.Components.Common.FormTitleComponent>
                            @JailNameWithCode
                        </JailTalk.Web.Components.Common.FormTitleComponent>
                    </MudItem>

                    <MudItem sm="12">
                        <MudNumericField Label="Amount" @bind-Value="@RechargeAmount" For="@(()=> RechargeAmount)"
                                         Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.CurrencyRupee"></MudNumericField>
                    </MudItem>

                    <MudItem sm="12">
                        <AppProgressButton IsProgressing="_sendRequestProcessing"
                                           ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                           OnClick="(async ()=> await OnRequestSubmitted())">Send Request</AppProgressButton>
                        <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => DialogInstance.Close(false))">Close</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudContainer>
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; }

    [Parameter]
    [EditorRequired]
    public int JailId { get; set; }

    [Parameter]
    [EditorRequired]
    public string JailNameWithCode { get; set; }

    public float RechargeAmount { get; set; } = 1000;

    private bool _sendRequestProcessing = false;


    private async Task OnRequestSubmitted()
    {
        ChangeToLoadingState(ref _sendRequestProcessing);
        await AppMediator.Send(new RequestJailAccountRechargeCommand()
            {
                JailId = JailId,
                RechargeAmount = RechargeAmount
            })
        .OnSuccess(async rechargeRequestId =>
        {
            ChangeToLoadedState(ref _sendRequestProcessing);
            ToastService.Success("Account recharge requested successfully.");
            await InvokeAsync(()=>DialogInstance.Close(DialogResult.Ok(true)));
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
            ChangeToLoadedState(ref _sendRequestProcessing);
        });
    }
}
