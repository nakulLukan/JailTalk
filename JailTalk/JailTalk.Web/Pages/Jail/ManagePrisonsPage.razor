@page "/prisons"
@using JailTalk.Application.Dto.Jail;
@using JailTalk.Application.Requests.Jail;
@using JailTalk.Shared.Extensions;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using MediatR;
@inject IMediator Mediator;
@inject IAppMediator AppMediator;
@inject NavigationManager NavigationManager;
<HasPermissionComponent Roles="@Permissions.Admin" />
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudDataGrid T="PrisonListDto" Items="@Elements" Virtualize="true" Groupable="false" Bordered="true" ShowMenuIcon="false" FixedHeader="true" Dense>
        <ToolBarContent>
            <MudText Typo="Typo.h6"><b>Prisons</b></MudText>
            <MudSpacer />
            <MudLink Href="/prisons/new">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Add New Prison</MudButton>
            </MudLink>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Code" Title="Prison Code" />
            <PropertyColumn Property="x => x.Name" Title="Prison Name" />
            <PropertyColumn Property="x => x.AccountBalance" Title="Balance Amount">
                <CellTemplate>
                    <MudText Class="@GetClassForAccountBalance(context.Item.AccountBalance)" Typo="Typo.body2">
                        @context.Item.AccountBalance.ToCurrency()
                    </MudText>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.IsSystemTurnedOff" Title="Telephone Device Status">
                <CellTemplate>
                    <MudText Class="@GetClassForIsSystemTurnedOff(context.Item.IsSystemTurnedOff)" Typo="Typo.body2">@(context.Item.IsSystemTurnedOff ? "Turned Off" : "Running")</MudText>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.AddressAsText" Title="Address" />
                <TemplateColumn Title="Action">
                    <CellTemplate>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense>
                        <MudMenuItem OnClick="@(() => OnEditClicked(context.Item.Id))">Edit</MudMenuItem>
                        <MudMenuItem Class="@(GetClassForIsSystemTurnedOff(!context.Item.IsSystemTurnedOff))"
                                     OnClick="@(async () => await OnTurnOnOffDeviceClicked(context.Item))">@(context.Item.IsSystemTurnedOff ? "Turn On System" : "Shutdown System")</MudMenuItem>
                            <MudMenuItem OnClick="@(() => OnRechargeClicked(context.Item))">Recharge Account</MudMenuItem>
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <NoRecordsContent>
                <JailTalk.Web.Components.Common.NoRecordsComponent />
            </NoRecordsContent>
        </MudDataGrid>
    </MudContainer>
    <MudDialog @bind-IsVisible="_rechargeIsOpen">
        <DialogContent>
            <RechargeRequestPrisonAccountBalanceComponent JailId="@_selectedItem.Id" JailNameWithCode="@($"{_selectedItem.Name} ({_selectedItem.Code})")"
                                                          OnRequestSent="OnRechargeRequestSent" OnClose="OnRechargeRequestClosed" />
        </DialogContent>
    </MudDialog>

    @code {
    List<PrisonListDto> Elements = new();
    bool _rechargeIsOpen = false;
    PrisonListDto _selectedItem = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        Elements = await Mediator.Send(new GetPrisonsQuery());
        StateHasChanged();
    }

    private string GetClassForIsSystemTurnedOff(bool value)
    {
        return value ? "red-text" : "green-text";
    }

    private string GetClassForAccountBalance(float accountBalance)
    {
        return accountBalance < 50 ? "red-text" : "green-text";
    }

    private void OnEditClicked(int jailId)
    {
        NavigationManager.NavigateTo($"prisons/{jailId}");
    }

    private void OnRechargeClicked(PrisonListDto selectedItem)
    {
        _selectedItem = selectedItem;
        _rechargeIsOpen = true;
        StateHasChanged();
    }

    private async Task OnTurnOnOffDeviceClicked(PrisonListDto item)
    {
        await AppMediator.Send(new TurnfOnOffJailDeviceCommand
            {
                JailId = item.Id,
                TurnOffDevice = !item.IsSystemTurnedOff
            })
            .OnSuccess(async turnedOff =>
            {
                item.IsSystemTurnedOff = turnedOff;
                if (turnedOff)
                {
                    ToastService.Success("All devices in this prison turned off.");
                }
                else
                {
                    ToastService.Success("All devices started.");
                }

                await InvokeAsync(StateHasChanged);
            })
            .OnError(err =>
            {
                ToastService.Error(err.Message);
            });
    }

    private void OnRechargeRequestClosed(bool isClosed)
    {
        _rechargeIsOpen = false;
        StateHasChanged();
    }

    private void OnRechargeRequestSent(long requestId)
    {
        _rechargeIsOpen = false;
        ToastService.Success("Account recharge requested successfully.");
        StateHasChanged();
    }
}
