@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prison;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using JailTalk.Web.Impl.Events;
@inject IAppMediator AppMediator;
<JailTalk.Web.Components.Common.HorizontalSpacer Spacing="6" />
<MudGrid>
    <MudItem xs="12">
        <MudImage Src="@dpSrc" Alt="Prisoner Display Picture" Elevation="25" Class="rounded-lg" Height="150" Width="150" ObjectFit="ObjectFit.Cover" />
    </MudItem>
    <MudItem xs="6">
        <MudText>PID</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.Pid</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>First Name</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.FirstName</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>Middle Name</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.MiddleName</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>Last Name</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.LastName</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>Gender</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.Gender</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>Prison Code</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.JailCode</b> </MudText>
    </MudItem>

    <MudItem xs="6">
        <MudText>Prison Name</MudText>
    </MudItem>
    <MudItem xs="6">
        <MudText><b>@personalDetails.JailName</b> </MudText>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public string PrisonerId { get; set; }

    private string dpSrc => string.IsNullOrEmpty(personalDetails.DpSrc) ? Assets.DefaultProfilePlaceholder : personalDetails.DpSrc;
    PrisonerDetailDto personalDetails = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await AppMediator.Send(new PrisonerDetailsQuery()
            {
                Id = Guid.Parse(PrisonerId)
            })
        .OnSuccess(async data =>
        {
            personalDetails = data;
            await InvokeAsync(StateHasChanged);
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }
}
