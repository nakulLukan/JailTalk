@page "/prisoners/released"
@using JailTalk.Application.Dto.Device;
@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Dto.ReleasedPrisoner;
@using JailTalk.Application.Requests.Device;
@using JailTalk.Application.Requests.ReleasedPrisoner;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using JailTalk.Web.Helpers;
@using JailTalk.Web.Impl.Events;
@using MediatR;
@inject IMediator Mediator;
@inject NavigationManager NavigationManager;
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudDataGrid T="ReleasedPrisonerListDto" Items="@_prisoners" SortMode="SortMode.Multiple"
                 Hideable="true" RowClick="OnRowClick" Bordered Dense Hover RowClass="cursor-pointer" RowsPerPage="@_pageSize">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Manage Prisoners (Released)</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Enter PID" Adornment="Adornment.Start" Immediate
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0" OnKeyDown="@OnEnterPressed" Clearable
                          OnClearButtonClick="OnClear"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Pid" Title="PID" Sortable="false" />
            <PropertyColumn Property="x => x.FullName" Title="Full Name" Sortable="false" />
            <PropertyColumn Property="x => x.LastReleasedOn" Title="Last Released On" Sortable="false" />
        </Columns>
        <PagerContent>
            <div class="d-flex flex-column align-center">
                <MudPagination Class="pa-4"
                               Color="Color.Primary" Count="_prisonersCount" Size="Size.Small" SelectedChanged="@(async (x) => await OnPageSelected(x))" />
            </div>
        </PagerContent>
        <NoRecordsContent>
            <JailTalk.Web.Components.Common.NoRecordsComponent />
        </NoRecordsContent>
    </MudDataGrid>
</MudContainer>

@code {
    private bool _loading = true;

    private string _searchString = "";
    private string _lastSearchString = "";

    private List<ReleasedPrisonerListDto> _prisoners = new List<ReleasedPrisonerListDto>();
    private int _prisonersCount;
    private int _selectedPage = 1;
    private const int _pageSize = 2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetPrisoners();
        }
    }

    private async Task GetPrisoners()
    {
        _loading = true;
        StateHasChanged();
        var response = await Mediator.Send(new GetAllReleasedPrisonersQuery()
            {
                Pid = _searchString,
                Skip = (_selectedPage - 1) * _pageSize,
                Take = _pageSize
            });

        _prisoners = response.Data;
        _prisonersCount = UIHelper.GetNumberOfPages(response.TotalRecords, _pageSize);
        _selectedPage = 1;
        _loading = false;
        StateHasChanged();
    }

    private void OnRowClick(DataGridRowClickEventArgs<ReleasedPrisonerListDto> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"prisoners/released/{tableRowClickEventArgs.Item.PrisonerId}");
    }

    private async Task OnEnterPressed(KeyboardEventArgs eventArg)
    {
        if (eventArg.Code == "Enter")
        {
            await OnSearch();
        }
    }

    private async Task OnSearch()
    {
        if (_lastSearchString == _searchString)
        {
            return;
        }

        await GetPrisoners();
        _lastSearchString = _searchString;
    }

    private async Task OnClear()
    {
        _searchString = _lastSearchString = string.Empty;
        await GetPrisoners();
    }

    private async Task OnPageSelected(int selectedPage)
    {
        _selectedPage = selectedPage;
        await GetPrisoners();
    }
}