@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prison;
@using JailTalk.Application.Services;
@using JailTalk.Shared.Models;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using MediatR;
@inject IMediator Mediator;
@inject IAppMediator AppMediator;

<MudTable Items="@contacts" Dense="true" Hover="true" Bordered="true" Striped="true"
          Class="no-border" Elevation="4" Outlined>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="(x => _addIsOpen = !_addIsOpen)">Add Contact</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>S/L</MudTh>
        <MudTh>Contact Name</MudTh>
        <MudTh>Contact Number</MudTh>
        <MudTh>Relationship</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="S/L">@context.Serial</MudTd>
        <MudTd DataLabel="Contact Name">@context.Name</MudTd>
        <MudTd DataLabel="Contact Number">@context.ContactNumber</MudTd>
        <MudTd DataLabel="Relationship">@context.Relationship</MudTd>
        <MudTd DataLabel="Address">@context.RelativeAddress</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Action">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem OnClick="@(()=> OnEditContactClicked(context.Id))">Edit</MudMenuItem>
                <MudMenuItem OnClick="@(() => OnContactBlocked(context.Id, context.IsBlocked))">@(context.IsBlocked ? "Unblock Number" : "Block Number")</MudMenuItem>
                    <MudMenuItem OnClick="@(() => OnContactDisabled(context.Id, context.IsActive))">@(context.IsActive ? "Disable Number" : "Enable Number")</MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Typo="Typo.caption"><b>No Records Found !!!</b></MudText>
        </NoRecordsContent>
    </MudTable>

    <MudDialog @bind-IsVisible="_addIsOpen" Options="options">
        <DialogContent>
            <AddContactDetailComponent PrisonerId="@PrisonerId" OnSubmitSuccess="OnAddContactSuccess" OnSubmitFailed="OnAddEditContactFailed" />
        </DialogContent>
    </MudDialog>

    <MudDialog @bind-IsVisible="_editIsOpen" Options="options">
        <DialogContent>
            <EditContactDetailComponent PrisonerId="@PrisonerId" ContactDetailId="@_editContactId" OnSubmitSuccess="OnEditContactSuccess" OnSubmitFailed="OnAddEditContactFailed" />
        </DialogContent>
    </MudDialog>
    @code {
    [Parameter]
    public string PrisonerId { get; set; }
    List<PrisonerContactDetailListDto> contacts = new();

    bool _addIsOpen = false;
    bool _editIsOpen = false;
    long _editContactId = 0;

    DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = true
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await UpdateContacts();
        StateHasChanged();
    }

    private async Task OnAddContactSuccess(long id)
    {
        ToastService.Success("Contact details added successfully");
        _addIsOpen = false;
        await UpdateContacts();
        StateHasChanged();
    }

    private async Task OnEditContactSuccess(long id)
    {
        ToastService.Success("Contact details updated successfully");
        _editIsOpen = false;
        await UpdateContacts();
        StateHasChanged();
    }

    private void OnAddEditContactFailed(ErrorDto err)
    {
        ToastService.Error(err.Message);
    }

    private async Task UpdateContacts()
    {
        contacts = await Mediator.Send(new PrisonerContactDetailsQuery
            {
                PrisonerId = Guid.Parse(PrisonerId)
            });
    }

    private async Task OnContactBlocked(long contactNumberId, bool isNumberBlocked)
    {
        await AppMediator.Send(new DisableOrBlockContactCommand()
            {
                ContactId = contactNumberId,
                BlockContact = !isNumberBlocked,
                DisableContact = null
            })
            .OnSuccess(data =>
            {
                string status = isNumberBlocked ? "unblocked" : "blocked";
                ToastService.Success($"Contact {status} successfully.");
                UpdateItemStatus(contactNumberId, !isNumberBlocked, nameof(PrisonerContactDetailListDto.IsBlocked));
            })
            .OnError(err =>
            {
                ToastService.Error(err.Message);
            });
    }

    private async Task OnContactDisabled(long contactNumberId, bool isContactActive)
    {
        await AppMediator.Send(new DisableOrBlockContactCommand()
            {
                ContactId = contactNumberId,
                BlockContact = null,
                DisableContact = isContactActive
            })
            .OnSuccess(data =>
            {
                string status = isContactActive ? "disabled" : "enabled";
                ToastService.Success($"Contact {status} successfully.");
                UpdateItemStatus(contactNumberId, !isContactActive, nameof(PrisonerContactDetailListDto.IsActive));
            })
            .OnError(err =>
            {
                ToastService.Error(err.Message);
            });
    }

    private void UpdateItemStatus(long contactId, bool value, string nameOfProperty)
    {
        var item = contacts.First(x => x.Id == contactId);
        item.GetType().GetProperty(nameOfProperty).SetValue(item, value);
        item.Status = PrisonerHelper.ConvertContactStateAsText(item.IsActive, item.IsBlocked);
        InvokeAsync(StateHasChanged);
    }

    private void OnEditContactClicked(long contactId)
    {
        _editContactId = contactId;
        _editIsOpen = true;
        _addIsOpen = false;
    }
}
