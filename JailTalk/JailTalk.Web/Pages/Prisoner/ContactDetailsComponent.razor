@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prison;
@using JailTalk.Shared.Models;
@using MediatR;
@inject IMediator Mediator;

<MudTable Items="@contacts" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Contacts</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="(x => _isOpen = !_isOpen)">Add Contact</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>S/L</MudTh>
        <MudTh>Contact Number</MudTh>
        <MudTh>Relationship</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="S/L">@context.Serial</MudTd>
        <MudTd DataLabel="Contact Number">@context.ContactNumber</MudTd>
        <MudTd DataLabel="Relationship">@context.Relationship</MudTd>
        <MudTd DataLabel="Address">@context.RelativeAddress</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Action">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem>Edit</MudMenuItem>
                <MudMenuItem>Block Number</MudMenuItem>
                <MudMenuItem>Disable Number</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Typo="Typo.caption"><b>No Records Found !!!</b></MudText>
    </NoRecordsContent>
</MudTable>

<MudDialog @bind-IsVisible="_isOpen" Options="options">
    <DialogContent>
        <AddContactDetailComponent PrisonerId="@PrisonerId" OnSubmitSuccess="OnAddContactSuccess" />
    </DialogContent>
</MudDialog>
@code {
    [Parameter]
    public string PrisonerId { get; set; }
    List<PrisonerContactDetailListDto> contacts = new();

    bool _isOpen = false;

    DialogOptions options = new DialogOptions
        {
            CloseButton = true,
            DisableBackdropClick = true
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await UpdateContacts();
        StateHasChanged();
    }

    private async Task OnAddContactSuccess(long id)
    {
        ToastService.Success("Contact details added successfully");
        _isOpen = false;
        await UpdateContacts();
        StateHasChanged();
    }

    private void OnAddContactFailed(ErrorDto err)
    {
        ToastService.Error(err.Message);
    }

    private async Task UpdateContacts()
    {
        contacts = await Mediator.Send(new PrisonerContactDetailsQuery
        {
            PrisonerId = Guid.Parse(PrisonerId)
        });
    }
}
