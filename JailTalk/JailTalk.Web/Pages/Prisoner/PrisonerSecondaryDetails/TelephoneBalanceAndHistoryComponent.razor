@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prisoner.AccountManagement;
@using JailTalk.Shared.Extensions;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using Microsoft.AspNetCore.Components.Forms
@inject IAppMediator AppMediator;

<MudCard Elevation="4" Outlined>
    <MudCard>
        <MudCardContent>
            <MudStack Row="true" Spacing="10">
                <MudItem>
                    <MudText Typo="Typo.overline">Account Balance</MudText>
                    <MudText Typo="Typo.h6"><b>@balanceInfo.AccountBalanceAmount.ToCurrency()</b></MudText>
                </MudItem>
                <MudItem>
                    <MudText Typo="Typo.overline">Talk Time Left</MudText>
                    <MudText Typo="Typo.h6"><b> @balanceInfo.TalkTimeLeft</b></MudText>
                </MudItem>
                <MudSpacer />
                <MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnRechargeSubmit">Recharge Balance</MudButton>
                </MudItem>
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudCard>
<MudMessageBox @ref="_rechargePopup" CancelText="Cancel" Title="Recharge Account" Class="ma-10" >
    <MessageContent>
        <MudNumericField Adornment="Adornment.Start" AdornmentAriaLabel="Curreny"
                         AdornmentIcon="@Icons.Material.TwoTone.CurrencyRupee" @bind-Value="@rechargeAmount" Label="Enter Top-up Amount"
                         Min="1" />
    </MessageContent>
    <YesButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled">Recharge</MudButton>
    </YesButton>
</MudMessageBox>
@code {
    [Parameter]
    public string PrisonerId { get; set; }
    MudMessageBox _rechargePopup;
    AccountBalanceDto balanceInfo = new();

    float? rechargeAmount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await GetAccountBalanceDetails(Guid.Parse(PrisonerId));
    }

    private async Task GetAccountBalanceDetails(Guid prisonerId)
    {
        await AppMediator.Send(new AccountBalanceQuery
            {
                PrisonerId = Guid.Parse(PrisonerId)
            })
        .OnSuccess(async data =>
        {
            balanceInfo = data;
            await InvokeAsync(StateHasChanged);
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }

    private async Task OnRechargeSubmit()
    {
        var rechargePressed = await _rechargePopup.Show();
        if (rechargePressed.HasValue && rechargePressed.Value)
        {
            await AppMediator.Send(new RechargeAccountCommand
                {
                    PrisonerId = Guid.Parse(PrisonerId),
                    RechargeAmount = rechargeAmount.Value
                })
                .OnSuccess(async data =>
                {
                    ToastService.Success("Account Recharged Successfully");
                    await GetAccountBalanceDetails(Guid.Parse(PrisonerId));
                })
                .OnError(err =>
                {
                    ToastService.Error(err.Message);
                });
        }
    }
}
