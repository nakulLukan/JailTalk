@using Fluxor;
@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prisoner.CallManagement;
@using JailTalk.Shared;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using JailTalk.Web.Store.Prisoner;
@using MediatR;
@inject IMediator Mediator;
@inject IAppMediator AppMediator;


<MudDataGrid Items="@Elements" Virtualize="true" Groupable="false" Bordered="true" ShowMenuIcon="false" FixedHeader="true"
             Height="400px" Class="no-border" Elevation="4" Outlined>
    <ToolBarContent>
        <MudText Typo="Typo.h6"><b>Call History</b></MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Callee" Title="Callee" />
        <PropertyColumn Property="x => x.ContactNumber" Title="Contact Number" />
        <PropertyColumn Property="x => x.CallStartedOn" Title="Started On" />
        <PropertyColumn Property="x => x.CallEndedOn" Title="Ended On" />
        <PropertyColumn Property="x=> x.CallDuration" Title="Duration" />
        <PropertyColumn Property="x=> x.CallEndReason" Title="Status" />
        <TemplateColumn Title="Recording">
            <CellTemplate>
                <MudStack Row>
                    @if (context.Item.CallRecordingState.HasValue && context.Item.CallRecordingState.Value)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.PlayCircleOutline" OnClick="@(async ()=> await GetRecording(context.Item.Id))"></MudIconButton>
                    }
                    else if (context.Item.CallRecordingState.HasValue)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.PlayDisabled" Disabled Color="Color.Error"></MudIconButton>
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        <JailTalk.Web.Components.Common.NoRecordsComponent />
    </NoRecordsContent>
</MudDataGrid>
<MudMessageBox @ref="audioPlayerPopup" Title="@_fileName" YesText="Close">
    <MessageContent>
        <audio controls autoplay>
            <source src="@_signedAudioSrc" />
        </audio>
        <MudDivider DividerType="DividerType.Middle" Class="ma-4" />
        <MudText Class="d-block" Typo="Typo.caption">File Size: <b>@_fileSize</b> </MudText>
        <MudText Class="d-block" Typo="Typo.caption">Call Duration: <b>@_callDuration</b> </MudText>
    </MessageContent>
</MudMessageBox>
@code {
    [EditorRequired]
    [Parameter]
    public string PrisonerId { get; set; }

    public List<CallHistoryListDto> Elements { get; set; }
    private string _signedAudioSrc = string.Empty;
    private string _fileName = string.Empty;
    private string _fileSize = string.Empty;
    private string _callDuration = string.Empty;
    private MudMessageBox audioPlayerPopup;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        Elements = await Mediator.Send(new CallHistoryQuery()
            {
                LastNDays = 5,
                PrisonerId = Guid.Parse(PrisonerId)
            });
        StateHasChanged();
    }

    private async Task GetRecording(long callHistoryId)
    {
        var data = await Mediator.Send(new GetPrisonerCallRecording()
            {
                CallHistoryId = callHistoryId
            });
        _signedAudioSrc = data.SignedUrl;
        _fileName = data.FileName;
        _fileSize = data.FileSizeAsText;
        _callDuration = data.CallDurationAsText;
        StateHasChanged();
        _ = await audioPlayerPopup.Show();
    }
}
