@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prison;
@using JailTalk.Shared.Extensions;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using Microsoft.AspNetCore.Components.Forms
@inject IAppMediator AppMediator;

<MudCard Elevation="0">
    <MudCard>
        <MudCardContent>
            <MudStack Row="true" Spacing="10">
                <MudItem>
                    <MudText Typo="Typo.overline">Account Balance</MudText>
                    <MudText Typo="Typo.h6"><b>@balanceInfo.AccountBalanceAmount.ToCurrency()</b></MudText>
                </MudItem>
                <MudItem>
                    <MudText Typo="Typo.overline">Talk Time Left</MudText>
                    <MudText Typo="Typo.h6"><b> @balanceInfo.TalkTimeLeft</b></MudText>
                </MudItem>
                <MudSpacer />
                <MudItem>

                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpen">Recharge Balance</MudButton>
                        <MudPopover Open="@_isOpen" Fixed="true" Class="px-4 py-2 blue lighten-5"
                                    AnchorOrigin="Origin.CenterLeft" TransformOrigin="Origin.CenterRight"
                                    Style="max-width: 250px">
                            <MudGrid Justify="Justify.FlexEnd">
                                <MudItem xs="12">
                                    <MudNumericField Adornment="Adornment.Start" AdornmentAriaLabel="Curreny" AdornmentIcon="@Icons.Material.TwoTone.CurrencyRupee" @bind-Value="@rechargeAmount" Label="Enter Top-up Amount"
                                                     Min="1" />
                                </MudItem>
                                <MudItem>
                                    <MudButton Class="ml-auto mr-n3 mb-1" Color="Color.Success" Variant="Variant.Filled"
                                               ButtonType="ButtonType.Submit" OnClick="OnRechargeSubmit">Recharge</MudButton>
                                </MudItem>
                                <MudItem>
                                    <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Cancel</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudPopover>
                    </div>
                </MudItem>
            </MudStack>
        </MudCardContent>
    </MudCard>
</MudCard>
@code {
    [Parameter]
    public string PrisonerId { get; set; }

    AccountBalanceDto balanceInfo = new();

    float? rechargeAmount = 0;
    public bool _isOpen;
    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await GetAccountBalanceDetails(Guid.Parse(PrisonerId));
    }

    private async Task GetAccountBalanceDetails(Guid prisonerId)
    {
        await AppMediator.Send(new AccountBalanceQuery
            {
                PrisonerId = Guid.Parse(PrisonerId)
            })
        .OnSuccess(async data =>
        {
            balanceInfo = data;
            await InvokeAsync(StateHasChanged);
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }

    private async Task OnRechargeSubmit()
    {
        await AppMediator.Send(new RechargeAccountCommand
            {
                PrisonerId = Guid.Parse(PrisonerId),
                RechargeAmount = rechargeAmount.Value
            })
            .OnSuccess(async data =>
            {
                _isOpen = false;
                ToastService.Success("Account Recharged Successfully");
                await GetAccountBalanceDetails(Guid.Parse(PrisonerId));
            })
            .OnError(err =>
            {
                ToastService.Error(err.Message);
            });
    }
}
