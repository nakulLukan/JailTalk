@using JailTalk.Application.Dto.Prison;
@using JailTalk.Application.Requests.Prisoner.Contacts;
@using JailTalk.Shared;
@using JailTalk.Shared.Models;
@using JailTalk.Web.Contracts.Events;
@using JailTalk.Web.Extensions;
@using MediatR;
@using Microsoft.AspNetCore.Components.Forms;
@inject IAppMediator AppMediator;
@inject IMediator Mediator;

<Microsoft.AspNetCore.Components.Forms.EditForm Model="model" OnValidSubmit="OnSubmit">
    <Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />
    <MudPaper Elevation="0">
        <MudGrid>
            <MudItem sm="12">
                <MudText Typo="Typo.h5">Update Contact Details</MudText>
            </MudItem>
            <MudItem sm="12">
                <MudTextField Label="Contact Name" @bind-Value="@model.Name" For="@(()=> model.Name)"></MudTextField>
            </MudItem>
            <MudItem sm="3">
                <MudNumericField Adornment="Adornment.Start" AdornmentText="+"
                                 Label="Code" @bind-Value="@model.CountryCode" For="@(()=> model.CountryCode)" Variant="Variant.Text"></MudNumericField>
            </MudItem>
            <MudItem sm="9">
                <MudTextField Label="Phone Number" @bind-Value="@model.PhoneNumber" For="@(()=> model.PhoneNumber)"></MudTextField>
            </MudItem>
            <MudItem sm="6">
                <JailTalk.Web.Components.Lookup.LookupSelectComponent Label="Relationship" For="@(()=> model.RelationshipId)"
                @bind-Value="@model.RelationshipId" LookupMaster="@LookupMasters.Relationship.ToString()" />
            </MudItem>
            <MudItem sm="12">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Update</MudButton>
                <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Outlined" Color="Color.Surface">Clear</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</Microsoft.AspNetCore.Components.Forms.EditForm>
@code {
    [EditorRequired]
    [Parameter]
    public string PrisonerId { get; set; }

    [Parameter]
    [EditorRequired]
    public long ContactDetailId { get; set; }

    [Parameter]
    public EventCallback<long> OnSubmitSuccess { get; set; }
    [Parameter]
    public EventCallback<ErrorDto> OnSubmitFailed { get; set; }

    EditContactDetailsDto model = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        var response = await Mediator.Send(new GetPrisonerContactByIdQuery()
            {
                ContactId = ContactDetailId
            });
        model.RelationshipId = response.RelativeTypeId;
        model.PhoneNumber = response.PhoneNumber;
        model.PrisonerId = Guid.Parse(PrisonerId);
        model.ContactId = ContactDetailId;
        model.CountryCode = response.CountryCode;
        model.Name = response.Name;
        StateHasChanged();
    }

    private async Task OnSubmit(EditContext context)
    {
        await AppMediator.Send(new EditContactDetailsCommand
            {
                CountryCode = "+" + model.CountryCode.Trim(),
                PhoneNumber = model.PhoneNumber.Trim(),
                PrisonerId = Guid.Parse(PrisonerId),
                RelationshipId = model.RelationshipId,
                Name = model.Name,
                ContactId = ContactDetailId
            })
        .OnSuccess(async data =>
        {
            await InvokeAsync(() => OnSubmitSuccess.InvokeAsync(data));
        })
        .OnError(async err =>
        {
            await InvokeAsync(() => OnSubmitFailed.InvokeAsync(err));
        });
    }
}
